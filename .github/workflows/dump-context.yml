name: Dump GH Contexts for PR Actions

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  tmp:
    runs-on: ubuntu-latest
    steps:
      - name: "git clone"
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: "github-script"
        uses: actions/github-script@v6
        env:
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
        with:
          github-token: ${{ secrets.COMMENTING_GITHUB_TOKEN }}
          script: |
            if (context.eventName === 'pull_request') {
              const repo_full_path_split = process.env.GITHUB_REPOSITORY.split('/');
              const repo_name = repo_full_path_split[repo_full_path_split.length - 1];

              console.log(`FOR MY SANITY - repo_name is '${repo_name}' and context.payload.pull_request.base.repo.name is '${context.payload.pull_request.base.repo.name}'.`);

              let text = '';
              let commit_sha = '';
              if (context.payload.action === 'opened') {
                commit_sha = context.payload.pull_request.head.sha;
                text = `Thank you for submitting a PR starting from \`${commit_sha}\`.`;
              } else if (context.payload.action === 'synchronize') {
                commit_sha = context.payload.after;
                text = `Thank you for submitting commit \`${commit_sha}\`.`;
              }

              console.log(`BEFORE - ${JSON.stringify({
                pull_number: context.payload.number,
                owner: process.env.GITHUB_REPOSITORY_OWNER,
                repo: context.payload.pull_request.base.repo.name,
                commit_id: commit_sha,
              })}`);

              if (text !== '') {
                const { data: files } = await github.rest.pulls.listFiles({
                  pull_number: context.payload.number,
                  owner: process.env.GITHUB_REPOSITORY_OWNER,
                  repo: repo_name
                });

                console.log(`MIDWAY - ${JSON.stringify({
                  pull_number: context.payload.number,
                  owner: process.env.GITHUB_REPOSITORY_OWNER,
                  repo: context.payload.pull_request.base.repo.name,
                  commit_id: commit_sha,
                })}`);

                filenames = [];
                for (const files_entry of files) {
                  filenames.push(files_entry.filename);
                }
                for (const filename of filenames) {
                  if (filename.endsWith('README.md')) {
                    // In diff.
                    try {
                      await github.rest.pulls.createReviewComment({
                        pull_number: context.payload.number,
                        owner: process.env.GITHUB_REPOSITORY_OWNER,
                        repo: context.payload.pull_request.base.repo.name,
                        commit_id: commit_sha,
                        path: filename,
                        line: 158,
                        body: 'You are doing great, keep it up!'
                      });
                    } catch(e) {
                      console.log(`EXCEPTION - ${e}.`);
                    }

                    // Out of diff.
                    try {
                      await github.rest.pulls.createReviewComment({
                        pull_number: context.payload.number,
                        owner: process.env.GITHUB_REPOSITORY_OWNER,
                        repo: context.payload.pull_request.base.repo.name,
                        commit_id: commit_sha,
                        path: filename,
                        line: 1,
                        body: 'You are doing great, keep it up!'
                      });
                    } catch(e) {
                      console.log(`EXCEPTION - ${e}.`);
                    }
                  }
                }
                await github.rest.issues.createComment({
                  issue_number: context.payload.number,
                  repo: context.payload.pull_request.base.repo.name,
                  owner: process.env.GITHUB_REPOSITORY_OWNER,
                  body: text
                });
              }
            }
